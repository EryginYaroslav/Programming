# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J2qLnjWCw2u5YM4WVPBwEF2U4AFQHnhA
"""

number = input()

if len(number) == 5 and number.isdigit():
    product = 1
    for digit in number:
        product *= int(digit)
    print(product)

number = input("Введите шестизначное число: ")

if len(number) == 6 and number.isdigit():
    sum_even_positions = 0
    sum_odd_positions = 0

    for i in range(len(number)):
        if i % 2 == 0:
            sum_even_positions += int(number[i])
        else:
            sum_odd_positions += int(number[i])
    result = int(f"{sum_even_positions}{sum_odd_positions}")
    print("Результат:", result)
else:
    print("Ошибка: введите шестизначное число")

N = int(input("Введите количество чисел: "))
sum_ = 0
count_ = 0
for _ in range(N):
    number = int(input())
    if number % 3 == 0:
        sum_ += number
        count_ += 1
if sum_ > 0:
    result = sum_ / count_
    print("Результат", result)
else:
    print(-1)

A = int(input("Введите число Фибоначчи: "))
fib1 = 1
fib2 = 1
n = 2

while fib2 < A:
    fib1, fib2 = fib2, fib1 + fib2
    n += 1

if fib2 == A:
    print("Число", A, "является", n, "числом Фибоначчи")
else:
    print(-1)

def print_of_two(N):
    power = 1
    while power <= N:
      print(power, end=" ")
      power *= 2
N = int(input())
print_of_two(N)

N = int(input("Введите число: "))
count_positive = 0
for _ in range(N):
    number = int(input())
    if number > 0:
        count_positive += 1
print(count_positive)

max_value = 0
count_max = 0

while True:
    number = int(input())
    if number == 0:
        break

    if number > max_value:
        max_value = number
        count_max = 1
    elif number == max_value:
        count_max += 1

print(count_max)

def my_sort(matrix):
    result = []
    n = len(matrix)

    top, bottom = 0, n - 1
    left, right = 0, n - 1

    while top <= bottom and left <= right:
        for i in range(left, right + 1):
            result.append(matrix[top][i])
        top += 1

        for i in range(top, bottom + 1):
            result.append(matrix[i][right])
        right -= 1

        if top <= bottom:
            for i in range(right, left - 1, -1):
                result.append(matrix[bottom][i])
            bottom -= 1

        if left <= right:
            for i in range(bottom, top - 1, -1):
                result.append(matrix[i][left])
            left += 1

    return result

my_sort([[1,2,3,1], [4,5,6,4], [7,8,9,7],[7,8,9,7]])

class Laptop:
    def __init__(self, brand, model, price):
        self.brand = brand
        self.model = model
        self.price = price
        self._laptop_name = f"{brand} {model}"

    def laptop_name(self):
        return self._laptop_name

hp = Laptop('hp', '15-bw0xx', 57000)
print(hp.price)
print(hp.laptop_name())

class Promise:
    def __init__(self, Id, salary):
        self.Id = Id
        self.salary = salary
        self.paid = False

    def fulfill(self):
        self.paid = True

    def reset(self):
        self.paid = False

class Person:
    def __init__(self, first_name, second_name, Id):
        self.first_name = first_name
        self.second_name = second_name
        self.Id = Id

class Director(Person):
    def __init__(self, first_name, second_name, Id, salary):
        super().__init__(first_name, second_name, Id)
        self.promise = Promise(Id, salary)

    def check_promises(self):
        return self.promise.paid

class Employee(Person):
    def __init__(self, first_name, second_name, Id, salary):
        super().__init__(first_name, second_name, Id)
        self.promise = Promise(Id, salary)

class Company:
    def __init__(self, balance=0):
        self.balance = balance
        self._profit = 0
        self._director = None
        self.employees = []

    def create_director(self, first_name, second_name, Id, salary):
        self._director = Director(first_name, second_name, Id, salary)

    def create_employee(self, first_name, second_name, Id, salary):
        employee = Employee(first_name, second_name, Id, salary)
        self.employees.append(employee)

    def set_profit(self, profit):
        self._profit = profit
        self.balance += profit

    def fulfill_promise(self):
        total_salary = self._director.promise.salary + sum(emp.promise.salary for emp in self.employees)

        if self.balance >= total_salary:
            self._director.promise.fulfill()
            for emp in self.employees:
                emp.promise.fulfill()
            self.balance -= total_salary
            return True
        else:
            self._director.promise.reset()
            for emp in self.employees:
                emp.promise.reset()
            return False

    def director(self):
        return self._director

vk = Company(balance=50)
vk.create_director(
  first_name="Владимир",
  second_name="Кириенко",
  Id=1,
  salary=15
)

vk.create_employee(
  first_name="Елена",
  second_name="Иванова",
  Id=2,
  salary=8
)

vk.create_employee(
  first_name="Виктор",
  second_name="Кузнецов",
  Id=3,
  salary=6
)

vk.set_profit(145.12)
print(vk.fulfill_promise())

director = vk.director()
print(director.check_promises())

vk.set_profit(-200)
print(vk.fulfill_promise())

print(director.check_promises())